# -*- coding: utf-8 -*-
"""Jayasri.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TAgKwW2Hhcb39ic_N1R6AfGiSEUoSaRi

Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""Load the Dataset"""

import pandas as pd

# Replace 'your_dataset.csv' with the actual uploaded file name 'movies_metadata.csv'
df = pd.read_csv('movies_metadata.csv')
df.head()

"""Data Exploration"""

df.info()
df.describe()
df.head()

"""Check for missing values and duplicates"""

print("Missing values:\n", df.isnull().sum())
print("Duplicates:", df.duplicated().sum())

"""Visualize a few features"""

!pip install --upgrade patsy

"""Identity target and features"""

# Let's assume we want to predict 'vote_average', if it's the rating column
target = 'vote_average'  # Change 'vote_average' if needed
features = df.drop(columns=[target])

"""Convert categorical columns to numerical"""

categorical_cols = features.select_dtypes(include='object').columns
features[categorical_cols] = features[categorical_cols].apply(lambda x: pd.factorize(x)[0])
features.head()

"""One-hot Encoding"""

# ipython-input-2-49f00d57e0d3
import pandas as pd # Import pandas with alias 'pd'

# Make sure 'df' is defined before using it.
# This code assumes 'movies_metadata.csv' has been loaded
# previously using pd.read_csv()

# Load the dataframe (make sure 'movies_metadata.csv' is in the correct location)
df = pd.read_csv('movies_metadata.csv')

# Let's assume we want to predict 'vote_average', if it's the rating column
target = 'vote_average'  # Change 'vote_average' if needed
features = df.drop(columns=[target]) # Now, 'df' should be available

"""Feature scaling"""

from sklearn.preprocessing import StandardScaler
import pandas as pd

# Load the dataframe (make sure 'movies_metadata.csv' is in the correct location)
df = pd.read_csv('movies_metadata.csv')

# Let's assume we want to predict 'vote_average', if it's the rating column
target = 'vote_average'  # Change 'vote_average' if needed
features = df.drop(columns=[target]) # Now, 'df' should be available

# Assuming features is your DataFrame with categorical features already factorized
# Convert categorical features to numerical using pd.factorize before one-hot encoding
categorical_cols = features.select_dtypes(include='object').columns
features[categorical_cols] = features[categorical_cols].apply(lambda x: pd.factorize(x)[0])

# Perform one-hot encoding
features_encoded = pd.get_dummies(features, columns=features.select_dtypes(include='object').columns)

# Scale the features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_encoded)

"""Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(features_scaled, df[target], test_size=0.2, random_state=42)

"""Model Building"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Load the dataframe
df = pd.read_csv('movies_metadata.csv')

# Assuming 'vote_average' is the target column
target = 'vote_average'
features = df.drop(columns=[target])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Load the dataframe
df = pd.read_csv('movies_metadata.csv')

# Assuming 'vote_average' is the target column
target = 'vote_average'
features = df.drop(columns=[target])

# Convert categorical features to numerical using pd.factorize before one-hot encoding
categorical_cols = features.select_dtypes(include='object').columns
features[categorical_cols] = features[categorical_cols].apply(lambda x: pd.factorize(x)[0])

"""Evaluation"""

# Impute missing values in the target variable (y_train) before training
imputer = SimpleImputer(strategy='mean') # or other strategies like 'median'
y_train_reshaped = imputer.fit_transform(y_train.values.reshape(-1, 1))  # Reshape for SimpleImputer using .values
y_train = y_train_reshaped.ravel() # Flatten back to original shape

"""Make predictions from new input"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Load the dataframe
df = pd.read_csv('movies_metadata.csv')

# Assuming 'vote_average' is the target column
target = 'vote_average'
features = df.drop(columns=[target])

# Convert categorical features to

"""Convert to Dataframe and Encode"""

# Let's convert a sample dict input to dataframe and encode
sample_input = pd.DataFrame([{
    'genre': 'Action',
    'director': 'Christopher Nolan',
    'duration': 150
}])

# Define categorical_cols based on sample_input columns (if not already defined)
categorical_cols = sample_input.select_dtypes(include=['object']).columns

# Factorize and one-hot encode
sample_input[categorical_cols] = sample_input[categorical_cols].apply(lambda x: pd.factorize(x)[0])

"""Predict the final Grade"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Load the dataframe
df = pd.read_csv('movies_metadata.csv')

# Assuming 'vote_average' is the target column
target = 'vote_average'
features = df.drop(columns=[target])

# Convert categorical features to numerical using pd.factorize before one

"""Deployment-Building an Iterative App"""

!pip install gradio

"""Create a prediction function"""

def predict_movie_rating(genre, director, duration):
    input_df = pd.DataFrame([{
        'genre': genre,
        'director': director,
        'duration': duration
    }])

    input_df[categorical_cols] = input_df[categorical_cols].apply(lambda x: pd.factorize(x)[0])
    input_encoded = pd.get_dummies(input_df)
    input_scaled = scaler.transform(input_encoded)
    prediction = model.predict(input_scaled)
    return f"Predicted Movie Rating: {round(prediction[0], 2)}"

"""Create the Gradio Interface"""

import gradio as gr

iface = gr.Interface(
    fn=predict_movie_rating,
    inputs=[
        gr.Textbox(label="Genre"),
        gr.Textbox(label="Director"),
        gr.Number(label="Duration (minutes)")
    ],
    outputs="text",
    title="ðŸŽ¥ Movie Rating Predictor"
)

iface.launch()